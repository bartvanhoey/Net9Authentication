@page "/Account/Registration"

@using Net9Auth.BlazorWasm.Services.Authentication.Register
@using Net9Auth.Shared.Models.Authentication.Register

@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IRegisterService RegisterService
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registration</PageTitle>

<div class="row">
    <div class="col-md-6">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser"
                  FormName="register">
            <DataAnnotationsValidator/>
            <h2>Create a new account</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true"
                           placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password"
                           aria-required="true"/>
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="form-control"
                           autocomplete="new-password" aria-required="true"/>
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Registration</button>
        </EditForm>
    </div>
    @* <div class="col-md-6 col-md-offset-2">
    <section>
    <h3>Use another service to register.</h3>
    <hr />
    <ExternalLoginPicker />
    </section>
    </div> *@
</div>

@code {

    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    [SupplyParameterFromForm] private RegisterInputModel Input { get; set; } = new();

    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    private string? Message { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        var result = await RegisterService.RegisterAsync(Input);
        if (result is { Succeeded: true })
        {
            Logger.LogInformation("User created a new account with password");
            RedirectManager.RedirectTo("Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        else
            Message = "Error: Could not register the user.";
    }

}