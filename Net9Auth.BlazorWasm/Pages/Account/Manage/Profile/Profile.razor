@page "/Account/Manage/Profile"


@using Net9Auth.BlazorWasm.Services.Authentication.Infra
@using Net9Auth.BlazorWasm.Services.Authentication.Profile
@using Net9Auth.Shared.Infrastructure.Extensions
@using Net9Auth.Shared.Models.Authentication.SetPhoneNumber

@inject IIdentityAccessor IdentityAccessor 
@inject IProfileService ProfileService

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

<StatusMessage Message="@Message"/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input id="username" type="text" value="@_userName" class="form-control" placeholder="Please choose your username." disabled/>
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText id="phone-number" @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number."/>
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _userName = string.Empty;

    private string? Message { get; set; }

    // [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private SetPhoneNumberInputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _userName  = await IdentityAccessor.GetUserNameAsync();

        if (_userName == null || _userName.IsNullOrWhiteSpace()) return;

        var profile = await ProfileService.GetProfileAsync();
        Input.PhoneNumber = profile?.PhoneNumber;
        
        StateHasChanged();
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrWhiteSpace(Input.PhoneNumber)) return;
        var model = new SetPhoneNumberInputModel { PhoneNumber = Input.PhoneNumber};
        var profile = await ProfileService.SetPhoneNumberAsync(model);
        Message = "";
        Message = profile.Succeeded ? "Phone number successfully updated" : "Error: Updating phone number went wrong";
    }


}