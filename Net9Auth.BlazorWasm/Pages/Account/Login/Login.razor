@page "/Account/Login"
@inject IdentityRedirectManager RedirectManager



@using Net9Auth.BlazorWasm.Services.Authentication.Login
@using Net9Auth.BlazorWasm.Services.Authentication.Login.Models
@using Net9Auth.Shared.Models.Authentication.Login
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject ILoginService LoginService

<PageTitle>Log in</PageTitle>

<div class="row">
    <div class="col-md-6">
        <section>
            <StatusMessage Message="@_errorMessage"/>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <h2>Log in</h2>
                <hr/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true"/>
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText id="password" type="password"
                               @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true"/>
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <br>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a
                            href="@(NavigationManager.GetUriWithQueryParameters("Account/Registration", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            Registration as a new user
                        </a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    @* <div class="col-md-6 col-md-offset-2">
    <section>
    <h3>Use another service to log in.</h3>
    <hr />
    <ExternalLoginPicker />
    </section>
    </div> *@
</div>

@code {
    private string? _errorMessage;

    // [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private LoginInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override Task OnInitializedAsync()
    {
        return Task.CompletedTask;

        // TODO HttpContext is always null here
        // if (HttpMethods.IsGet(HttpContext.Request.Method))
        // {
        // Clear the existing external cookie to ensure a clean login process
        // await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        // }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        // var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        _errorMessage = string.Empty;
        var result = await LoginService.Login(Input);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            _errorMessage = result.Message == AuthLoginMessage.SomethingWentWrong ? "Error: Something went wrong!" : "Error: Username or Password wrong!";
        }


        // else if (result.RequiresTwoFactor)
        // {
        // RedirectManager.RedirectTo(
        // "Account/LoginWith2fa",
        // new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        // }
        // else if (result.IsLockedOut)
        // {
        // Logger.LogWarning("User account locked out.");
        // RedirectManager.RedirectTo("Account/Lockout");
        // }
        // else
        // {
        // errorMessage = "Error: Invalid login attempt.";
        // }
    }

}